// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.mycp.domain;

import in.mycp.domain.User;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect User_Roo_Finder {
    
    public static TypedQuery<User> User.findUsersByEmailEquals(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.email = :email", User.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByEmailEqualsAndPasswordEqualsAndActiveNot(String email, String password, Boolean active) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        if (password == null || password.length() == 0) throw new IllegalArgumentException("The password argument is required");
        if (active == null) throw new IllegalArgumentException("The active argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.email = :email  AND o.password = :password  AND o.active IS NOT :active", User.class);
        q.setParameter("email", email);
        q.setParameter("password", password);
        q.setParameter("active", active);
        return q;
    }
    
}
