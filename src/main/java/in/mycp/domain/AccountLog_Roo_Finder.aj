// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.mycp.domain;

import in.mycp.domain.AccountLog;
import in.mycp.domain.User;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect AccountLog_Roo_Finder {
    
    public static TypedQuery<AccountLog> AccountLog.findAccountLogsByUserId(User userId) {
        if (userId == null) throw new IllegalArgumentException("The userId argument is required");
        EntityManager em = AccountLog.entityManager();
        TypedQuery<AccountLog> q = em.createQuery("SELECT o FROM AccountLog AS o WHERE o.userId = :userId", AccountLog.class);
        q.setParameter("userId", userId);
        return q;
    }
    
    public static TypedQuery<AccountLog> AccountLog.findAccountLogsByUserIdAndTimeOfEntryBetween(User userId, Date minTimeOfEntry, Date maxTimeOfEntry) {
        if (userId == null) throw new IllegalArgumentException("The userId argument is required");
        if (minTimeOfEntry == null) throw new IllegalArgumentException("The minTimeOfEntry argument is required");
        if (maxTimeOfEntry == null) throw new IllegalArgumentException("The maxTimeOfEntry argument is required");
        EntityManager em = AccountLog.entityManager();
        TypedQuery<AccountLog> q = em.createQuery("SELECT o FROM AccountLog AS o WHERE o.userId = :userId AND o.timeOfEntry BETWEEN :minTimeOfEntry AND :maxTimeOfEntry", AccountLog.class);
        q.setParameter("userId", userId);
        q.setParameter("minTimeOfEntry", minTimeOfEntry);
        q.setParameter("maxTimeOfEntry", maxTimeOfEntry);
        return q;
    }
    
    public static TypedQuery<AccountLog> AccountLog.findAccountLogsByUserIdAndTimeOfEntryGreaterThan(User userId, Date timeOfEntry) {
        if (userId == null) throw new IllegalArgumentException("The userId argument is required");
        if (timeOfEntry == null) throw new IllegalArgumentException("The timeOfEntry argument is required");
        EntityManager em = AccountLog.entityManager();
        TypedQuery<AccountLog> q = em.createQuery("SELECT o FROM AccountLog AS o WHERE o.userId = :userId AND o.timeOfEntry > :timeOfEntry", AccountLog.class);
        q.setParameter("userId", userId);
        q.setParameter("timeOfEntry", timeOfEntry);
        return q;
    }
    
}
